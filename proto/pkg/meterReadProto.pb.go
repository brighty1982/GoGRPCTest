// Code generated by protoc-gen-go. DO NOT EDIT.
// source: meterReadProto.proto

package meterReadProto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type MeterRead struct {
	SerialNo             string               `protobuf:"bytes,1,opt,name=SerialNo,proto3" json:"SerialNo,omitempty"`
	Date                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Reg1Read             int64                `protobuf:"varint,3,opt,name=Reg1Read,proto3" json:"Reg1Read,omitempty"`
	Reg2Read             int64                `protobuf:"varint,4,opt,name=Reg2Read,proto3" json:"Reg2Read,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MeterRead) Reset()         { *m = MeterRead{} }
func (m *MeterRead) String() string { return proto.CompactTextString(m) }
func (*MeterRead) ProtoMessage()    {}
func (*MeterRead) Descriptor() ([]byte, []int) {
	return fileDescriptor_meterReadProto_71bd0b9798bf44a4, []int{0}
}
func (m *MeterRead) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeterRead.Unmarshal(m, b)
}
func (m *MeterRead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeterRead.Marshal(b, m, deterministic)
}
func (dst *MeterRead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterRead.Merge(dst, src)
}
func (m *MeterRead) XXX_Size() int {
	return xxx_messageInfo_MeterRead.Size(m)
}
func (m *MeterRead) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterRead.DiscardUnknown(m)
}

var xxx_messageInfo_MeterRead proto.InternalMessageInfo

func (m *MeterRead) GetSerialNo() string {
	if m != nil {
		return m.SerialNo
	}
	return ""
}

func (m *MeterRead) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *MeterRead) GetReg1Read() int64 {
	if m != nil {
		return m.Reg1Read
	}
	return 0
}

func (m *MeterRead) GetReg2Read() int64 {
	if m != nil {
		return m.Reg2Read
	}
	return 0
}

// The response message containing the greetings
type MeterReadReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeterReadReply) Reset()         { *m = MeterReadReply{} }
func (m *MeterReadReply) String() string { return proto.CompactTextString(m) }
func (*MeterReadReply) ProtoMessage()    {}
func (*MeterReadReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_meterReadProto_71bd0b9798bf44a4, []int{1}
}
func (m *MeterReadReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeterReadReply.Unmarshal(m, b)
}
func (m *MeterReadReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeterReadReply.Marshal(b, m, deterministic)
}
func (dst *MeterReadReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterReadReply.Merge(dst, src)
}
func (m *MeterReadReply) XXX_Size() int {
	return xxx_messageInfo_MeterReadReply.Size(m)
}
func (m *MeterReadReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterReadReply.DiscardUnknown(m)
}

var xxx_messageInfo_MeterReadReply proto.InternalMessageInfo

func (m *MeterReadReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*MeterRead)(nil), "MeterRead")
	proto.RegisterType((*MeterReadReply)(nil), "MeterReadReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MeterReadServiceClient is the client API for MeterReadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MeterReadServiceClient interface {
	// Sends a greeting
	SubmitMeterRead(ctx context.Context, in *MeterRead, opts ...grpc.CallOption) (*MeterReadReply, error)
}

type meterReadServiceClient struct {
	cc *grpc.ClientConn
}

func NewMeterReadServiceClient(cc *grpc.ClientConn) MeterReadServiceClient {
	return &meterReadServiceClient{cc}
}

func (c *meterReadServiceClient) SubmitMeterRead(ctx context.Context, in *MeterRead, opts ...grpc.CallOption) (*MeterReadReply, error) {
	out := new(MeterReadReply)
	err := c.cc.Invoke(ctx, "/MeterReadService/SubmitMeterRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeterReadServiceServer is the server API for MeterReadService service.
type MeterReadServiceServer interface {
	// Sends a greeting
	SubmitMeterRead(context.Context, *MeterRead) (*MeterReadReply, error)
}

func RegisterMeterReadServiceServer(s *grpc.Server, srv MeterReadServiceServer) {
	s.RegisterService(&_MeterReadService_serviceDesc, srv)
}

func _MeterReadService_SubmitMeterRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeterRead)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeterReadServiceServer).SubmitMeterRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MeterReadService/SubmitMeterRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeterReadServiceServer).SubmitMeterRead(ctx, req.(*MeterRead))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeterReadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MeterReadService",
	HandlerType: (*MeterReadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitMeterRead",
			Handler:    _MeterReadService_SubmitMeterRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meterReadProto.proto",
}

func init() {
	proto.RegisterFile("meterReadProto.proto", fileDescriptor_meterReadProto_71bd0b9798bf44a4)
}

var fileDescriptor_meterReadProto_71bd0b9798bf44a4 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x8d, 0xbb, 0xa8, 0x3b, 0x82, 0x2b, 0xc1, 0x43, 0xc8, 0xc5, 0xd2, 0x53, 0xf1, 0x90,
	0x6a, 0x7d, 0x05, 0xaf, 0x8a, 0xa4, 0xbe, 0x40, 0x6a, 0xc7, 0x10, 0x68, 0x48, 0x49, 0x53, 0xc1,
	0xa7, 0xf0, 0x95, 0xa5, 0x69, 0x13, 0xd9, 0x4b, 0xc8, 0xc7, 0xff, 0xcf, 0xc7, 0x0c, 0xdc, 0x59,
	0x0c, 0xe8, 0x25, 0xaa, 0xfe, 0xdd, 0xbb, 0xe0, 0xc4, 0xb8, 0xbc, 0xfc, 0x5e, 0x3b, 0xa7, 0x07,
	0xac, 0x23, 0x75, 0xf3, 0x57, 0x1d, 0x8c, 0xc5, 0x29, 0x28, 0x3b, 0xae, 0x85, 0xf2, 0x97, 0xc0,
	0xe1, 0x35, 0x4d, 0x52, 0x0e, 0x57, 0x2d, 0x7a, 0xa3, 0x86, 0x37, 0xc7, 0x48, 0x41, 0xaa, 0x83,
	0xcc, 0x4c, 0x05, 0xec, 0x7b, 0x15, 0x90, 0x9d, 0x17, 0xa4, 0xba, 0x6e, 0xb8, 0x58, 0xcd, 0x22,
	0x99, 0xc5, 0x47, 0x32, 0xcb, 0xd8, 0x5b, 0x5c, 0x12, 0xf5, 0xd3, 0xe2, 0x65, 0xbb, 0x82, 0x54,
	0x3b, 0x99, 0x79, 0xcb, 0x9a, 0x98, 0xed, 0x73, 0x16, 0xb9, 0x7c, 0x80, 0x9b, 0xbc, 0x90, 0xc4,
	0x71, 0xf8, 0xa1, 0x0c, 0x2e, 0x2d, 0x4e, 0x93, 0xd2, 0xb8, 0x2d, 0x95, 0xb0, 0x79, 0x81, 0xdb,
	0xdc, 0x6d, 0xd1, 0x7f, 0x9b, 0x4f, 0xa4, 0x8f, 0x70, 0x6c, 0xe7, 0xce, 0x9a, 0xf0, 0x7f, 0x16,
	0x88, 0xfc, 0xe7, 0x47, 0x71, 0x6a, 0x2f, 0xcf, 0xba, 0x8b, 0x78, 0xc3, 0xf3, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xd8, 0x1f, 0x56, 0x9c, 0x43, 0x01, 0x00, 0x00,
}
